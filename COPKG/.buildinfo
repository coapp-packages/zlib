/* target information */
@import "version.inc";

#product-info  {
	product-name: "zlib";
	version: "${package-version}";
	original-source-location: "http://zlib.net/zlib125.zip";
	original-source-website: "http://zlib.net";
	license: "zlib license -- http://zlib.net/zlib_license.html";
	packager: "garrett serack <garretts@microsoft.com>";
}

test {
	default : false;
	uses : release;
	
	build-command : @"
		set init_var=""This is a test...""
		pushd output\x86\release\bin\
		example.exe	|| goto failed
		example_d.exe	|| goto failed
		for /F ""tokens=*"" %%a in ('echo %init% ^| minigzip ^| minigzip -d') do (set ans_var=%%a)
		if %init_var% neq %ans_var% (goto failed)
		for /F ""tokens=*"" %%a in ('echo %init% ^| minigzip_d ^| minigzip_d -d') do (set ans_var=%%a)
		if %init_var% neq %ans_var% (goto failed)
		testzlib.exe zlibwapi.dll || goto failed
		testzlibstatic.exe zlibwapi.dll || goto failed
		popd
		
		pushd output\x64\release\bin\
		example.exe	|| goto failed
		example_d.exe	|| goto failed
		for /F ""tokens=*"" %%a in ('echo %init% ^| minigzip ^| minigzip -d') do (set ans_var=%%a)
		if %init_var% neq %ans_var% (goto failed)
		for /F ""tokens=*"" %%a in ('echo %init% ^| minigzip_d ^| minigzip_d -d') do (set ans_var=%%a)
		if %init_var% neq %ans_var% (goto failed)
		testzlib.exe zlibwapi.dll || goto failed
		testzlibstatic.exe zlibwapi.dll || goto failed
		popd
	";
}

package {
    set : ALL_COMPILERS="${ALL_COMPILERS??vc10, vc9}"; // suggested full list = "vc10, vc9, vc8, vc7.1, vc6, mingw";
    default : false;
    uses : sign;
    
    // In future versions of pTk, we hope to be able to make this list more concise and maliable.
    targets: { 
        @"copkg\zlib[vc10]-${package-version}-x86.msi",
        @"copkg\zlib-dev[vc10]-${package-version}-x86.msi",
        @"copkg\zlib-dev-common-${package-version}-any.msi",
        @"copkg\zlib[vc10]-${package-version}-x64.msi",
        @"copkg\zlib-dev[vc10]-${package-version}-x64.msi",
        @"copkg\zlib[vc9]-${package-version}-x86.msi",
        @"copkg\zlib-dev[vc9]-${package-version}-x86.msi",
        @"copkg\zlib[vc9]-${package-version}-x64.msi",
        @"copkg\zlib-dev[vc9]-${package-version}-x64.msi"
    };
    
    build-command : @"
        REM THERE IS SOME GOOFY STUFF IN HERE TO WORK AROUND A COUPLE BUGS IN AUTOPACKAGE.
        REM FIXES COMING SOON...
        cd COPKG
        coapp add-feed ""%cd%""
        coapp --force-scan list 
        autopackage zlib-dev-common.autopkg || goto failed
        for %%A in (${ALL_COMPILERS}) do (
            coapp --force-scan list 
            autopackage --flav=%%A --arc=x86 zlib.autopkg zlib-dev.autopkg || goto failed
            autopackage --flav=%%A --arc=x64 zlib.autopkg zlib-dev.autopkg || goto failed
        )
        coapp --force-scan list 
        coapp remove-feed ""%cd%""
        ptk update-version
    ";
}

update-version {
    default : false;
    
    build-command : @"
        REM auto-increment version.inc file...
        
        cd COPKG
        setlocal EnableDelayedExpansion
        for /F ""tokens=4,5,6,7  delims=.; "" %%v in (version.inc) do (
            set /a build=%%y + 1
            set VERSTRING=#define { package-version: %%v.%%w.%%x.!build!; }
        )
        echo !VERSTRING! > version.inc
    ";
}

sign {
    default : false;

    uses : release;

    build-command : @"
        REM Sign binaries.
        echo [Skipping binary signing -- autopackage will sign and manifest the binaries for us]
    ";
}

release {
    set: { 
        BUILD_CFG ="release";
        ALL_COMPILERS="${ALL_COMPILERS??vc10, vc9}"; // suggested full list = "vc10, vc9, vc8, vc7.1, vc6, mingw";
    };
    
    /*  Note that I do not use a "uses" here.
        In a future version of pTk, we hope to provide expanded syntax for iterating through 
        a list like ALL_COMPILERS and making "set" and "uses" statements inside the loop.
        At present, this is the most workable solution for compiling multiple flavors on demand.
     */
    
    build-command : @"
    if ""${CO_COMP??}"" equ """" (
        for %%a in (${ALL_COMPILERS}) do (
            if ""%%a"" equ ""vc6"" (
                ptk --CO_COMP=%%a --CO_SDK=feb2003 release
            ) else (
                ptk --CO_COMP=%%a release
            )
        )
    ) else (
        ptk --CO_COMP=${CO_COMP} x86
        ptk --CO_COMP=${CO_COMP} x64
    )
    ";
}

debug {
    default : false;

    set: { 
        BUILD_CFG ="debug";
    };
    
    uses : {
        x86 , x64
    };
}


x86 {   
    default : false;

    set: { 
        OUTPUT_ARCH="x86";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
        CO_COMP="${CO_COMP??vc10}";
        BUILD_CFG="${BUILD_CFG??debug}";
    };
    
    platform: x86;
    compiler: "${CO_COMP}";
    sdk: "${CO_SDK??sdk7.1}";
    
    uses : prep;
    
    targets: { 
		@"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib",             
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll"
	};
	
    build-command:@"
		REM This avoids problems of ambiguity later...
		rem Do zlibwapi build...
        pushd contrib\masmx86\
            call bld_ml32.bat
        popd 
		msbuild /p:Platform=win32 /p:Configuration=${BUILD_CFG} contrib\vstudio\${CO_COMP}\zlibvc.sln || goto failed

        rem Do zlib1 build...
        copy contrib\masmx86\inffas32.obj inffas32.obj || goto failed
        copy contrib\masmx86\match686.obj match686.obj || goto failed

        rem Makefile was modified to put output to temp dir, so we can have x86 and x64 builds at the same time
        mkdir temp
        rem lets clean out all the obj's first, otherwise we might accidentally link to another arch
        nmake -f win32/Makefile.msc clean || goto failed
        nmake -f win32/Makefile.msc LOC=""-DASMV -DASMINF"" OBJA=""match686.obj inffas32.obj"" || goto failed

        rem grab out outputs and put them in a consistent location.
        copy temp\zlib.lib  output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib                  || goto failed
        copy temp\zlib1.lib output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.lib                 || goto failed
        copy temp\zlib1.exp output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp                 || goto failed
        copy temp\zlib1.dll output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll                 || goto failed

        copy contrib\vstudio\${CO_COMP}\x86\MiniUnzip%BUILD_CFG%\miniunz.exe     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe    || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\MiniZip%BUILD_CFG%\minizip.exe       output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe    || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\TestZlibDll%BUILD_CFG%\testzlib.exe  output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\TestZlib%BUILD_CFG%\testzlib.exe     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlibstatic.exe   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\ZlibDll%BUILD_CFG%\zlibwapi.dll      output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\ZlibDll%BUILD_CFG%\zlibwapi.lib      output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x86\ZlibStat%BUILD_CFG%\zlibstat.lib     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib   || goto failed 
		copy example.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\example.exe	|| goto failed 
		copy minigzip.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minigzip.exe	|| goto failed 
		copy example_d.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\example_d.exe	|| goto failed 
		copy minigzip_d.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minigzip_d.exe	|| goto failed 
	";
    
    clean-command:@"
       erase contrib\masmx86\inffas32.lst  > nul 2> nul
       erase contrib\masmx86\inffas32.obj  > nul 2> nul
       erase contrib\masmx86\match686.lst  > nul 2> nul
       erase contrib\masmx86\match686.obj  > nul 2> nul
       if exist contrib\vstudio\${CO_COMP}\x86 rmdir /s /q contrib\vstudio\${CO_COMP}\x86  > nul 2> nul
       if exist temp rmdir /s /q temp > nul 2> nul
       if exist Release rmdir /s /q Release > nul 2> nul
       rem best you have your visual studio installed in the default location...
       REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
       REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
       nmake -f win32/Makefile.msc clean   > nul 2> nul
    ";
};

x64 {
    default : false;

    set: { 
        OUTPUT_ARCH="x64";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
        CO_COMP="${CO_COMP??vc10}";
        BUILD_CFG="${BUILD_CFG??debug}";
    };
    
    platform: x64;
    compiler: "${CO_COMP}";
    sdk: "${CO_SDK??sdk7.1}";

    uses : prep;

	targets: { 
		@"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib",             
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.lib",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp",
        @"output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll"
	};
	
    build-command:@"
        REM This avoids problems of ambiguity later...
		rem Do zlibwapi build...
        pushd contrib\masmx64\
        call bld_ml64.bat
        popd 
        msbuild /p:Platform=x64 /p:Configuration=${BUILD_CFG} contrib\vstudio\${CO_COMP}\zlibvc.sln || goto failed

        rem Do zlib1 build...
        copy contrib\masmx64\inffasx64.obj inffasx64.obj
        copy contrib\masmx64\gvmat64.obj gvmat64.obj 
        copy contrib\masmx64\inffas8664.c inffas8664.c
        
        rem best you have your visual studio installed in the default location...
        REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" amd64
        REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86_amd64

        mkdir temp
        rem I couldn't get the makefile to do this bit properly without changing it somewhat, so Ill do it myself for now
        rem lets clean out all the obj's first, otherwise we might accidentally link to another arch
        nmake -f win32/Makefile.msc clean
        cl -nologo -MD -W3 -O2 -Oy- -Zi -Fd""zlib"" -DASMV -DASMINF inffas8664.c
        nmake -f win32/Makefile.msc AS=ml64 LOC=""-DASMV -DASMINF"" OBJA=""inffasx64.obj gvmat64.obj inffas8664.obj"" 

        rem grab out outputs and put them in a consistent location.
        copy temp\zlib.lib  output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib                  || goto failed
        copy temp\zlib1.lib output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.lib                 || goto failed
        copy temp\zlib1.exp output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp                 || goto failed
        copy temp\zlib1.dll output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll                 || goto failed

        copy contrib\vstudio\${CO_COMP}\x64\MiniUnzip%BUILD_CFG%\miniunz.exe     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe    || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\%BUILD_CFG%\minizip.exe       output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe    || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\TestZlibDll%BUILD_CFG%\testzlib.exe  output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\TestZlib%BUILD_CFG%\testzlib.exe     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlibstatic.exe   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\ZlibDll%BUILD_CFG%\zlibwapi.dll      output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\ZlibDll%BUILD_CFG%\zlibwapi.lib      output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib   || goto failed 
        copy contrib\vstudio\${CO_COMP}\x64\ZlibStat%BUILD_CFG%\zlibstat.lib     output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib   || goto failed 
		copy example.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\example.exe	|| goto failed 
		copy minigzip.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minigzip.exe	|| goto failed 
		copy example_d.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\example_d.exe	|| goto failed 
		copy minigzip_d.exe	output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minigzip_d.exe	|| goto failed 
    ";

    clean-command:@"
       erase contrib\masmx64\inffasx64.lst  > nul 2> nul
       erase contrib\masmx64\inffasx64.obj  > nul 2> nul
       erase contrib\masmx64\gvmat64.lst  > nul 2> nul
       erase contrib\masmx64\gvmat64.obj  > nul 2> nul
       erase inffas8664.c  > nul 2> nul
       if exist contrib\vstudio\vc10\x64 rmdir /s /q contrib\vstudio\vc10\x64  > nul 2> nul
       if exist Release rmdir /s /q Release > nul 2> nul
       if exist temp rmdir /s /q temp > nul 2> nul
       rem best you have your visual studio installed in the default location...
       REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" amd64
       REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86_amd64
       nmake -f win32/Makefile.msc clean  > nul 2> nul
    ";
};

prep {
    default : false;

    build-command:@"
        mkdir output
        mkdir output\${CO_COMP}
        mkdir output\${CO_COMP}\${OUTPUT_ARCH}
        mkdir output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}
        mkdir output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin
        mkdir output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib
    ";
    
    clean-command:@"
        rmdir /s /q output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\lib    > nul 2> nul
        rmdir /s /q output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}\bin    > nul 2> nul
        rmdir /s /q output\${CO_COMP}\${OUTPUT_ARCH}\${BUILD_CFG}        > nul 2> nul
        rmdir /s /q output\${CO_COMP}\${OUTPUT_ARCH}                     > nul 2> nul
        rmdir /s /q output\${CO_COMP}                         > nul 2> nul
        rmdir /s /q output                                    > nul 2> nul
    ";
}

