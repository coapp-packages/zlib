/* target information */
@import "version.inc";

#product-info  {
	product-name: "zlib";
	version: "${package-version}";
	original-source-location: "http://zlib.net/zlib125.zip";
	original-source-website: "http://zlib.net";
	license: "zlib license -- http://zlib.net/zlib_license.html";
	packager: "garrett serack <garretts@microsoft.com>";
}

package {
    default : false;
    uses : {
        update-version, sign
    };
    
    targets: { 
        "copkg\zlib[vc10]-${package-version}-x86.msi",
        "copkg\zlib-dev[vc10]-${package-version}-x86.msi",
        "copkg\zlib-dev-common-${package-version}-any.msi",
        // "copkg\zlib[vc10]-${package-version}-x64.msi",
        // "copkg\zlib-dev[vc10]-${package-version}-x64.msi"
    };
    
    build-command : @"
        cd COPKG
        REM  autopackage zlib-dev-common.autopkg zlib[vc10]-x86.autopkg zlib-dev[vc10]-x86.autopkg zlib[vc10]-x64.autopkg zlib-dev[vc10]-x64.autopkg  || goto failed
        REM autopackage zlib-dev-common.autopkg zlib[vc10]-x86.autopkg zlib-dev[vc10]-x86.autopkg || goto failed
        
        autopackage zlib-dev-common.autopkg zlib[vc10]-x86.autopkg
    ";
}

update-version {
    default : false;
    
    build-command : @"
        REM auto-increment version.inc file...
        
        cd COPKG
        setlocal EnableDelayedExpansion
        for /F ""tokens=4,5,6,7  delims=.; "" %%v in (version.inc) do (
            set /a build=%%y + 1
            set VERSTRING=#define { package-version: %%v.%%w.%%x.!build!; }
        )
        echo !VERSTRING! > version.inc
    ";
}

sign {
    uses : release;

    build-command : @"
        REM Sign binaries.
    ";
}

release {
    set: { 
        BUILD_CFG ="release";
    };
    
    uses : {
        x86// , x64
    };
}

debug {
    set: { 
        BUILD_CFG ="debug";
    };
    
    uses : {
        x86// , x64
    };
}


x86 {   
    set: { 
        OUTPUT_ARCH="x86";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
    };
    
    compiler: vc10;
    platform: x86;
    
    uses : prep;
    
    targets: { 
		"!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib",             
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\Release\x86\zlib1.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll"
	};
	
    build-command:@"
        rem Do zlibwapi build...
        pushd contrib\masmx86\
            call bld_ml32.bat
        popd 
        msbuild /p:Platform=win32 /p:Configuration=Release contrib\vstudio\vc10\zlibvc.sln || goto failed

        rem Do zlib1 build...
        copy contrib\masmx86\inffas32.obj inffas32.obj || goto failed
        copy contrib\masmx86\match686.obj match686.obj || goto failed

        rem Makefile was modified to put output to temp dir, so we can have x86 and x64 builds at the same time
        mkdir temp
        rem lets clean out all the obj's first, otherwise we might accidentally link to another arch
        nmake -f win32/Makefile.msc clean || goto failed
        nmake -f win32/Makefile.msc LOC=""-DASMV -DASMINF"" OBJA=""match686.obj inffas32.obj"" || goto failed

        rem grab out outputs and put them in a consistent location.
        copy temp\zlib.lib  !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib                  || goto failed
        copy temp\zlib1.lib !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\Release\x86\zlib1.lib     || goto failed
        copy temp\zlib1.exp !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp                 || goto failed
        copy temp\zlib1.dll !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll                 || goto failed

        copy contrib\vstudio\vc10\x86\MiniUnzipRelease\miniunz.exe     !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe    || goto failed 
        copy contrib\vstudio\vc10\x86\MiniZipRelease\minizip.exe       !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe    || goto failed 
        copy contrib\vstudio\vc10\x86\TestZlibDllRelease\testzlib.exe  !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe   || goto failed 
        copy contrib\vstudio\vc10\x86\TestZlibRelease\testzlib.exe     !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlibstatic.exe   || goto failed 
        copy contrib\vstudio\vc10\x86\ZlibDllRelease\zlibwapi.dll      !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll   || goto failed 
        copy contrib\vstudio\vc10\x86\ZlibDllRelease\zlibwapi.lib      !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib   || goto failed 
        copy contrib\vstudio\vc10\x86\ZlibStatRelease\zlibstat.lib     !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib   || goto failed 
	";
    
    clean-command:@"
       erase contrib\masmx86\inffas32.lst  > nul 2> nul
       erase contrib\masmx86\inffas32.obj  > nul 2> nul
       erase contrib\masmx86\match686.lst  > nul 2> nul
       erase contrib\masmx86\match686.obj  > nul 2> nul
       if exist contrib\vstudio\vc10\x86 rmdir /s /q contrib\vstudio\vc10\x86  > nul 2> nul
       if exist temp rmdir /s /q temp > nul 2> nul
       if exist Release rmdir /s /q Release > nul 2> nul
       rem best you have your visual studio installed in the default location...
       REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
       REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
       nmake -f win32/Makefile.msc clean   > nul 2> nul
    ";
};

x64 {
    set: { 
        OUTPUT_ARCH="x64";
        OUTPUT_VERSION="${package-version}"; // this got picked up from the @import rule at the top.
    };
    
    compiler: vc10;
    platform: x64;

	targets: { 
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib",             
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\Release\x86\zlib1.lib",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp",
        "!output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll"           
	};
	
    build-command:@"
        rem Do zlibwapi build...
        pushd contrib\masmx64\
        call bld_ml64.bat
        popd 
        msbuild /p:Platform=x64 /p:Configuration=Release contrib\vstudio\vc10\zlibvc.sln

        rem Do zlib1 build...
        copy contrib\masmx64\inffasx64.obj inffasx64.obj
        copy contrib\masmx64\gvmat64.obj gvmat64.obj 
        copy contrib\masmx64\inffas8664.c inffas8664.c
        
        rem best you have your visual studio installed in the default location...
        REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" amd64
        REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86_amd64

        mkdir temp
        rem I couldn't get the makefile to do this bit properly without changing it somewhat, so Ill do it myself for now
        rem lets clean out all the obj's first, otherwise we might accidentally link to another arch
        nmake -f win32/Makefile.msc clean
        cl -nologo -MD -W3 -O2 -Oy- -Zi -Fd""zlib"" -DASMV -DASMINF inffas8664.c
        nmake -f win32/Makefile.msc AS=ml64 LOC=""-DASMV -DASMINF"" OBJA=""inffasx64.obj gvmat64.obj inffas8664.obj"" 

        rem grab out outputs and put them in a consistent location.
        copy temp\zlib.lib  !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib.lib                  || goto failed
        copy temp\zlib1.lib !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\Release\x86\zlib1.lib     || goto failed
        copy temp\zlib1.exp !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlib1.exp                 || goto failed
        copy temp\zlib1.dll !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlib1.dll                 || goto failed
        
        copy contrib\vstudio\vc10\x64\MiniUnzipRelease\miniunz.exe      !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\miniunz.exe    || goto failed 
		copy contrib\vstudio\vc10\x64\Release\minizip.exe               !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\minizip.exe    || goto failed 
		copy contrib\vstudio\vc10\x64\TestZlibDllRelease\testzlib.exe   !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlib.exe   || goto failed 
		copy contrib\vstudio\vc10\x64\TestZlibRelease\testzlib.exe      !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\testzlibstatic.exe   || goto failed 
		copy contrib\vstudio\vc10\x64\ZlibDllRelease\zlibwapi.dll,      !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin\zlibwapi.dll   || goto failed 
		copy contrib\vstudio\vc10\x64\ZlibDllRelease\zlibwapi.lib       !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibwapi.lib   || goto failed 
		copy contrib\vstudio\vc10\x64\ZlibStatRelease\zlibstat.lib      !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib\zlibstat.lib   || goto failed 
    ";

    clean-command:@"
       erase contrib\masmx64\inffasx64.lst  > nul 2> nul
       erase contrib\masmx64\inffasx64.obj  > nul 2> nul
       erase contrib\masmx64\gvmat64.lst  > nul 2> nul
       erase contrib\masmx64\gvmat64.obj  > nul 2> nul
       erase inffas8664.c  > nul 2> nul
       if exist contrib\vstudio\vc10\x64 rmdir /s /q contrib\vstudio\vc10\x64  > nul 2> nul
       if exist Release rmdir /s /q Release > nul 2> nul
       if exist temp rmdir /s /q temp > nul 2> nul
       rem best you have your visual studio installed in the default location...
       REM IF EXIST ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" amd64
       REM IF EXIST ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86_amd64
       nmake -f win32/Makefile.msc clean  > nul 2> nul
    ";
};

prep {
    build-command:@"
        mkdir !output
        mkdir !output\${OUTPUT_ARCH}
        mkdir !output\${OUTPUT_ARCH}\${BUILD_CFG}
        mkdir !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin
        mkdir !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib
    ";
    
    clean-command:@"
        rmdir /s /q !output\${OUTPUT_ARCH}\${BUILD_CFG}\lib    > nul 2> nul
        rmdir /s /q !output\${OUTPUT_ARCH}\${BUILD_CFG}\bin    > nul 2> nul
        rmdir /s /q !output\${OUTPUT_ARCH}\${BUILD_CFG}        > nul 2> nul
        rmdir /s /q !output\${OUTPUT_ARCH}                     > nul 2> nul
        rmdir /s /q !output                                    > nul 2> nul
    ";
}

